Lendo do arquivo ErrorFile.f
Line: 1 Column: 1 SuccessClass  <IDENT>  67
Line: 1 Column: 13 {  {  51
Line: 11 Column: 2 int  int  23
Line: 11 Column: 6 inteiroGlobal  <IDENT>  67
Line: 11 Column: 20 =  =  32
Line: 11 Column: 22 1.1  <float_literal>  63
Line: 11 Column: 25 ;  ;  55
Line: 12 Column: 2 string  string  24
Line: 12 Column: 9 stringGlobal  <IDENT>  67
Line: 12 Column: 22 =  =  32
Line: 12 Column: 24 "\n"  <string_constant>  60
Line: 12 Column: 28 ;  ;  55
Line: 13 Column: 2 char  char  25
Line: 13 Column: 7 caracterGlobal  <IDENT>  67
Line: 13 Column: 22 =  =  32
Line: 13 Column: 24 c  <IDENT>  67
Line: 13 Column: 25 ;  ;  55
Line: 14 Column: 2 boolean  <IDENT>  67
Line: 14 Column: 10 booleanoGlobal  <IDENT>  67
Line: 14 Column: 25 =  =  32
Line: 14 Column: 27 boolean  <IDENT>  67
Line: 14 Column: 34 ;  ;  55
Line: 15 Column: 2 float  float  27
Line: 15 Column: 8 floatGlobal  <IDENT>  67
Line: 15 Column: 20 =  =  32
Line: 15 Column: 22 .  .  57
Line: 15 Column: 23 00000000001  <int_constant>  59
Line: 15 Column: 34 ;  ;  55
Line: 16 Column: 2 float  float  27
Line: 16 Column: 8 floatGlobal1  <IDENT>  67
Line: 16 Column: 21 =  =  32
Line: 16 Column: 23 10  <int_constant>  59
Line: 16 Column: 25 .  .  57
Line: 16 Column: 26 ;  ;  55
Line: 17 Column: 2 float  float  27
Line: 17 Column: 8 g  <IDENT>  67
Line: 17 Column: 10 =  =  32
Line: 17 Column: 12 @  <INVALID_LEXICAL>  39
Line: 17 Column: 14 1  <int_constant>  59
Line: 17 Column: 15 ;  ;  55
Line 17 - Invalid string found: @
Line: 18 Column: 1 'a'  <CHARACTER>  64
Line: 19 Column: 1 a  <IDENT>  67
Line 20 - Invalid string found: @
Line: 20 Column: 1 @  <INVALID_LEXICAL>  60
Line: 22 Column: 1 .  .  57
Line: 22 Column: 2 1  <int_constant>  59
Line: 23 Column: 1 "\"  <string_constant>  60
Line: 24 Column: 1 "\n"  <string_constant>  60
Line: 25 Column: 1 "\r"  <string_constant>  60
Line: 27 Column: 2 /  /  42
Line: 27 Column: 4 Construtor  <IDENT>  67
Line: 27 Column: 15 com  <IDENT>  67
Line: 27 Column: 19 XOR  <IDENT>  67
Line: 27 Column: 22 ,  ,  56
Line: 27 Column: 23 NOT  <IDENT>  67
Line: 27 Column: 26 ,  ,  56
Line: 27 Column: 27 AND  <IDENT>  67
Line: 27 Column: 30 ,  ,  56
Line: 27 Column: 31 OR  <IDENT>  67
Line: 27 Column: 34 e  <IDENT>  67
Line: 27 Column: 36 comentario  <IDENT>  67
Line: 27 Column: 47 singleline  <IDENT>  67
Line: 28 Column: 2 (  (  49
Line: 28 Column: 3 boolean  <IDENT>  67
Line: 28 Column: 11 paramBool  <IDENT>  67
Line: 28 Column: 20 ,  ,  56
Line: 28 Column: 22 int  int  23
Line: 28 Column: 26 paramInt  <IDENT>  67
Line: 28 Column: 34 )  )  50
Line: 29 Column: 3 Success  <IDENT>  67
Line: 29 Column: 11 success  <IDENT>  67
Line: 29 Column: 19 =  =  32
Line: 29 Column: 21 new  new  18
Line: 30 Column: 3 super  super  22
Line: 30 Column: 8 (  (  49
Line: 30 Column: 9 ,  ,  56
Line: 30 Column: 10 paramBool  <IDENT>  67
Line: 30 Column: 19 )  )  50
Line: 30 Column: 20 ;  ;  55
Line: 31 Column: 3 boolean  <IDENT>  67
Line: 31 Column: 11 outroBoleano  <IDENT>  67
Line: 31 Column: 24 =  =  32
Line: 31 Column: 26 NOT  <IDENT>  67
Line: 31 Column: 30 OR  <IDENT>  67
Line: 31 Column: 33 paramBool  <IDENT>  67
Line: 31 Column: 43 OR  <IDENT>  67
Line: 31 Column: 46 NOT  <IDENT>  67
Line: 31 Column: 49 (  (  49
Line: 31 Column: 50 paramInt  <IDENT>  67
Line: 31 Column: 59 ==  ==  35
Line: 31 Column: 62 globalInt  <IDENT>  67
Line: 31 Column: 71 )  )  50
Line: 31 Column: 72 ;  ;  55
Line: 32 Column: 3 boolean  <IDENT>  67
Line: 32 Column: 11 resultBoolean  <IDENT>  67
Line: 32 Column: 25 =  =  32
Line: 32 Column: 27 1  <int_constant>  59
Line: 32 Column: 29 xor  xor  45
Line: 32 Column: 33 2  <int_constant>  59
Line: 32 Column: 35 not  not  46
Line: 32 Column: 39 2  <int_constant>  59
Line: 32 Column: 41 and  and  47
Line: 32 Column: 45 4  <int_constant>  59
Line: 32 Column: 47 or  or  48
Line: 32 Column: 50 5  <int_constant>  59
Line: 32 Column: 51 ;  ;  55
Line: 33 Column: 2 }  }  52
Line: 35 Column: 2 public  public  28
Line: 35 Column: 9 int  int  23
Line: 35 Column: 13 init  <IDENT>  67
Line: 35 Column: 19 {  {  51
Line: 36 Column: 3 int  int  23
Line: 36 Column: 7 i  <IDENT>  67
Line: 36 Column: 9 =  =  32
Line: 36 Column: 11 -  -  40
Line: 36 Column: 12 1  <int_constant>  59
Line: 36 Column: 13 ;  ;  55
Line: 37 Column: 3 string  string  24
Line: 37 Column: 10 s  <IDENT>  67
Line: 37 Column: 12 =  =  32
Line: 37 Column: 14 "string\n"  <string_constant>  60
Line: 38 Column: 3 float  float  27
Line: 38 Column: 9 floatInterno  <IDENT>  67
Line: 38 Column: 22 =  =  32
Line: 38 Column: 24 -  -  40
Line: 38 Column: 25 2.10  <float_literal>  63
Line: 38 Column: 29 ;  ;  55
Line: 40 Column: 3 return  return  21
Line: 40 Column: 10 i  <IDENT>  67
Line: 40 Column: 12 +  +  39
Line: 40 Column: 14 string  string  24
Line: 40 Column: 20 ;  ;  55
Line: 41 Column: 2 }  }  52
Line: 43 Column: 2 public  public  28
Line: 43 Column: 9 int  int  23
Line: 43 Column: 13 funcao  <IDENT>  67
Line: 43 Column: 20 (  (  49
Line: 43 Column: 21 )  )  50
Line: 43 Column: 22 {  {  51
Line: 45 Column: 3 for  for  16
Line: 45 Column: 6 (  (  49
Line: 45 Column: 7 int  int  23
Line: 45 Column: 11 i  <IDENT>  67
Line: 45 Column: 13 =  =  32
Line: 45 Column: 15 0  <int_constant>  59
Line: 45 Column: 16 ,  ,  56
Line: 45 Column: 18 i  <IDENT>  67
Line: 45 Column: 19 <  <  34
Line: 45 Column: 20 5  <int_constant>  59
Line: 45 Column: 21 ,  ,  56
Line: 45 Column: 23 i  <IDENT>  67
Line: 45 Column: 24 +  +  39
Line: 45 Column: 25 +  +  39
Line: 45 Column: 26 )  )  50
Line: 45 Column: 28 {  {  51
Line: 46 Column: 4 if  if  17
Line: 46 Column: 6 (  (  49
Line: 46 Column: 7 intGlobal  <IDENT>  67
Line: 46 Column: 17 <=  <=  36
Line: 46 Column: 20 i  <IDENT>  67
Line: 46 Column: 21 )  )  50
Line: 46 Column: 22 {  {  51
Line: 47 Column: 5 if  if  17
Line: 47 Column: 7 (  (  49
Line: 47 Column: 8 intGlobal  <IDENT>  67
Line: 47 Column: 18 !=  !=  38
Line: 47 Column: 21 i  <IDENT>  67
Line: 47 Column: 22 )  )  50
Line: 47 Column: 23 {  {  51
Line: 48 Column: 6 i  <IDENT>  67
Line: 48 Column: 8 =  =  32
Line: 48 Column: 10 i  <IDENT>  67
Line: 48 Column: 11 *  *  41
Line: 48 Column: 12 'a'  <CHARACTER>  64
Line: 48 Column: 15 ;  ;  55
Line: 49 Column: 6 i  <IDENT>  67
Line: 49 Column: 8 =  =  32
Line: 49 Column: 10 "a"  <string_constant>  60
Line: 49 Column: 13 /  /  42
Line: 49 Column: 14 1  <int_constant>  59
Line: 49 Column: 15 ;  ;  55
Line: 50 Column: 6 i  <IDENT>  67
Line: 50 Column: 8 =  =  32
Line: 50 Column: 10 i  <IDENT>  67
Line: 50 Column: 11 %  %  43
Line: 50 Column: 12 2  <int_constant>  59
Line: 50 Column: 13 ;  ;  55
Line: 51 Column: 6 int  int  23
Line: 51 Column: 10 const  <IDENT>  67
Line: 51 Column: 16 =  =  32
Line: 51 Column: 18 null  null  61
Line: 51 Column: 22 ;  ;  55
Line: 52 Column: 6 i  <IDENT>  67
Line: 52 Column: 7 -  -  40
Line: 52 Column: 8 -  -  40
Line: 52 Column: 9 ;  ;  55
Line: 53 Column: 5 }  }  52
Line: 54 Column: 5 break  break  11
Line: 54 Column: 10 ;  ;  55
Line: 55 Column: 4 }  }  52
Line: 55 Column: 6 else  else  14
Line: 55 Column: 11 {  {  51
Line: 56 Column: 5 i  <IDENT>  67
Line: 56 Column: 6 +  +  39
Line: 56 Column: 7 +  +  39
Line: 56 Column: 8 ;  ;  55
Line: 57 Column: 4 }  }  52
Line: 58 Column: 3 }  }  52
Line: 59 Column: 3 byte  <IDENT>  67
Line: 59 Column: 8 teclado  <IDENT>  67
Line: 59 Column: 16 =  =  32
Line: 59 Column: 18 (  (  49
Line: 59 Column: 19 byte  <IDENT>  67
Line: 59 Column: 23 )  )  50
Line: 59 Column: 25 read  read  20
Line: 59 Column: 29 (  (  49
Line: 59 Column: 30 )  )  50
Line: 59 Column: 31 ;  ;  55
Line: 60 Column: 3 System  <IDENT>  67
Line: 60 Column: 9 .  .  57
Line: 60 Column: 10 out  <IDENT>  67
Line: 60 Column: 13 .  .  57
Line: 60 Column: 14 print  print  19
Line: 60 Column: 19 (  (  49
Line: 60 Column: 20 "oi"  <string_constant>  60
Line: 60 Column: 24 )  )  50
Line: 60 Column: 25 ;  ;  55
Line: 63 Column: 3 return  return  21
Line: 63 Column: 10 i  <IDENT>  67
Line: 63 Column: 11 ;  ;  55
Line: 64 Column: 2 }  }  52
Line: 67 Column: 1 }  }  52
Line: 67 Column: 2   <EOF>  0
2Erros lexicos encontrados
