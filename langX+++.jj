/*************************************************************************
Autores: Bruno Heiden Matos (13200990), Kádio Francisco Miguel Colzani (13201010) e Márcio Pereira dos Santos (13201017)
Este programa é uma adaptação do exemplo do livro "Como Construir um Compilador Utilizando Ferramentas Java" para a Disciplina de Introdução à compiladores (INE5622)
************************************************************************/
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
package parser;

import java.io.*;
import recovery.*;


public class langX {
final static String Version = "X+++ Compiler - Version 1.0 - 2004";
int contParseError = 0;           // contador de erros sint�ticos
boolean debug_recovery;   // controla verbose de recupera��o de erros
Token lastError = null;


// Define o m�todo "main" da classe langX.
  public  static void main(String args[]) throws ParseException
  {
  boolean debug_as = false;
  boolean debug_recovery = false;

    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador l�xico/sint�tico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l� os par�metros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        {
            System.out.println("Usage is: java langX [-debug_AS] " +
             "[-debug_recovery] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // l� da entrada padr�o
        System.out.println("Reading from standard input . . .");
        parser = new langX(System.in); // cria AS
     }
     else
    {       // l� do arquivo
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new langX(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing(); // desab. verbose do AS
    try {
        parser.program();   // chama o m�todo que faz a an�lise
    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // vari�vel que indica se EOF foi alcan�ado
// o m�todo abaixo consome tokens at� alcan�ar um que perten�a ao conjunto
// de sincroniza��o

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
{
Token tok;

   if ( debug_recovery) // informa��o sobre a recupera��o
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Syncronizing Set: " + g);
   }

   if (g == null) throw e; // se o conjunto � null, propaga a exce��o

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se n�o chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Found syncronizing token: " +
                                   im(tok.kind));
             break;
        }
        if (debug_recovery)
             System.out.println("     Ignoring token: " + im(tok.kind));
        getNextToken();     // pega pr�ximo token
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
            eof = true;
    }
   if ( tok != lastError)
   {
        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa n�mero de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

}  // langX

PARSER_END(langX)

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}


/* Espacos a serem desprezados no inicio de cada token */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */
TOKEN :
{
  < BREAK: "break" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < SUPER: "super" >
| < DO: "do" >
| < WHILE: "while" >
| < SWITCH: "switch" >
| < CASE: "case" >
| < CASE_DEFAULT: "default" >
| < THIS: "this" >
}

/* Operadores lógicos */

TOKEN:
{
  < AND: "AND" >
| < OR: "OR" >
| < XOR: "XOR" >
| < NOT: "NOT" >
}

/* constantes */
TOKEN :
{
	< number_constants:(
		<int_constant> |
		<octa_constant> |
		<hexa_constant> |
		<binar_constant> |
		<long_constant> |
		<double_constant>
	) >
|	< #int_constant: ( ["0"-"9"] (["0"-"9"])* ) >
|	< #octa_constant: ( ["0"-"7"] (["0"-"7"])* ["o", "O"] ) >
|	< #hexa_constant: (
		( ["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
		( "0x" (["0"-"9","A"-"F","a"-"f"])* )
	) >
|	< #binar_constant: ( ["0"-"1"] (["0"-"1"])* ["b", "B"] ) >
|	< #long_constant: ( ["0"-"9"] (["0"-"9"])* ["l", "L"] ) >
|	< #double_constant: (
		( ["0"-"9"] (["0"-"9"])* ["d", "D"] ) |
		( ["0"-"9"] (["0"-"9"])* "." ["0"-"9"] (["0"-"9"])* )
	) >
|	< string_constant:"\""( ~["\"","\n","\r"])* "\"" >
|	< null_constant:"null" >
|	< boolean_constant:("true"|"false") >
}

/* Qualificadores */
TOKEN:
{
  < ACCESS_QUALIFIER: (<PUBLIC>|<PROTECTED>|<PRIVATE>) >
| < #PUBLIC:"public" >
| < #PROTECTED:"protected" >
| < #PRIVATE:"private" >
}

/* Qualificador FINAL */
TOKEN:
{
  < FINAL_QUALIFIER: "final" >
}

/* Tipos de variáveis */
TOKEN:
{
  < PRIMITIVE_TYPE: (<INT> | <DOUBLE> | <LONG> | <SHORT> | <FLOAT> | <STRING> | <CHAR> | <BYTE> | <BOOLEAN>) >
  | < #INT:"int" >
  | < #DOUBLE:"double" >
  | < #LONG:"long" >
  | < #SHORT:"short" >
  | < #FLOAT:"float" >
  | < #STRING:"string" >
  | < #CHAR:"char" >
  | < #BYTE:"byte" >
  | < #BOOLEAN:"boolean" >
}

/* Identificadores */
TOKEN :
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
| < #LETTER:["A"-"Z","a"-"z"] >
| < #DIGIT:["0"-"9"] >
| < #UNDERSCORE:"_" >
}

/* Simbolos especiais */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
}

/* Operadores */
TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}

/* Trata os erros l�xicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f",
  "_"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST:
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}



void program() throws ParseEOFException :
{
RecoverySet g = First.program;
}
{
    <EOF>
|
    classlist(g)
    try {
      <EOF>
    }
    catch (ParseException e)
    {
       consumeUntil(g, e, "program");
     }
   [ program() ]
}

void classlist(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = First.classlist.union(g);
}
{
   classdecl(f) [ classlist(g) ]
}

void classdecl(RecoverySet g) throws ParseEOFException :
{
}
{
try {
   <CLASS>  <IDENT> [ <EXTENDS> <IDENT> ] classbody(g)
}
catch (ParseException e)
{
    consumeUntil(g, e, "classdecl");
}
}

void classbody(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f2 = new RecoverySet(SEMICOLON).union(g),
	            f3 = First.methoddecl.union(g).remove(IDENT),
	            f4 = First.constructdecl.union(f3).remove(IDENT),
	            f5 = new RecoverySet(ACCESS_QUALIFIER).union(First.vardecl).union(f4).remove(ACCESS_QUALIFIER);
}
{
	try {
		<LBRACE>
			[classlist(f5)]
			(LOOKAHEAD(2) [<ACCESS_QUALIFIER>] vardecl(f2) <SEMICOLON>)*
			(constructdecl(f4))*
			(methoddecl(f3))*
		<RBRACE>
	} catch(ParseException e) {
		consumeUntil(g, e, "classbody");
	}
}

void vardecl(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		[<FINAL_QUALIFIER>] (<PRIMITIVE_TYPE> | <IDENT>)
		(<LBRACKET> <RBRACKET>)* varinit(g)
		(<COMMA> varinit(g))*
	} catch(ParseException e) {
		consumeUntil(g, e, "vardecl");
	}
}

void varinit(RecoverySet g) throws ParseEOFException :
{
}
{
	lvalue(g) [<ASSIGN> (alocexpression(g) | expression(g))]
}

void constructdecl(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<CONSTRUCTOR> methodbody(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "constructdecl");
	}
}

void methoddecl(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		[<ACCESS_QUALIFIER>] [<FINAL_QUALIFIER>] (<PRIMITIVE_TYPE> | <IDENT>)
		(<LBRACKET> <RBRACKET>)* <IDENT> methodbody(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "methoddecl");
	}
}

void methodbody(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<LPAREN> paramlist(f) <RPAREN> statement(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "methodbody");
	}
}

void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
	   [
	    [<FINAL_QUALIFIER>] (<PRIMITIVE_TYPE> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)*
	    (<COMMA> (<PRIMITIVE_TYPE> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)* )*
	   ]
	} catch (ParseException e) {
	   consumeUntil(g, e, "paramlist");
	}
}

void statement(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
				f2 = new RecoverySet(RBRACE).union(g).remove(IDENT);
}
{
	try {
			LOOKAHEAD(3) vardecl(f1) <SEMICOLON>
		|	LOOKAHEAD(4) methodcall(f1) <SEMICOLON>
		|	LOOKAHEAD(3) atribstat(f1) <SEMICOLON>
		|	printstat(f1) <SEMICOLON>
		|	readstat(f1) <SEMICOLON>
		|	returnstat(f1) <SEMICOLON>
		|	superstat(f1) <SEMICOLON>
		|	ifstat(g)
		|	forstat(g)
		|	dowhilestat(g)
		|	whilestat(g)
		|	switchcasestat(g)
		|	<LBRACE> statlist(f2) <RBRACE>
		|	<BREAK> <SEMICOLON>
		|	<SEMICOLON>
	} catch(ParseException e) {
		consumeUntil(g, e, "statement");
	}
}

void atribstat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
	try {
		lvalue(f1) <ASSIGN> ( alocexpression(g) | expression(g))
	} catch(ParseException e) {
		consumeUntil(g, e, "atribstat");
	}
}

void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<PRINT> expression(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "printstat");
	}
}

void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<READ> lvalue(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "readstat");
	}
}

void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<RETURN> [expression(g)]
	} catch(ParseException e) {
		consumeUntil(g, e, "returnstat");
	}
}

void superstat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<SUPER> <LPAREN> arglist(f) <RPAREN>
	} catch(ParseException e) {
		consumeUntil(g, e, "superstat");
	}
}

void ifstat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g),
	            f2 = new RecoverySet(ELSE).union(g);
}
{
	try {
		<IF> <LPAREN> expression(f1) <RPAREN> statement(f2)
		[LOOKAHEAD(1) <ELSE> statement(g)]
	} catch(ParseException e) {
		consumeUntil(g, e, "ifstat");
	}
}

void forstat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
	            f2 = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<FOR> <LPAREN> [atribstat(f1)] <SEMICOLON>
			[expression(f1)] <SEMICOLON>
			[atribstat(f2)] <RPAREN>
			statement(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "forstat");
	}
}

void  statlist(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f = First.statlist.remove(IDENT).union(g);
}
{
   statement(f) [statlist(g)]
}

void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<IDENT> (
			<LBRACKET> expression(null) <RBRACKET> |
			<DOT> <IDENT> [<LPAREN> arglist(null) <RPAREN>]
		)*
	} catch(ParseException e) {
		consumeUntil(g, e, "lvalue");
	}
}

void alocexpression(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g),
	            f2 = new RecoverySet(RBRACKET).union(g);
}
{
    <NEW> (
             LOOKAHEAD(2) (<IDENT> <LPAREN> arglist(f1) <RPAREN>) |
             (<PRIMITIVE_TYPE> | <IDENT>) (<LBRACKET> expression(f2) <RBRACKET>)+
          )
}

void expression(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		[<NOT>] numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ>) numexpr()]
		[(<AND>|<OR>|<XOR>) expression(g)]
	} catch(ParseException e) {
		consumeUntil(g, e, "expression");
	}
}

void numexpr() throws ParseEOFException :
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term() throws ParseEOFException :
{
}
{
    unaryexpr() ((<STAR> | <SLASH>| <REM>) unaryexpr())*
}

void unaryexpr() throws ParseEOFException :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}

void factor() throws ParseEOFException :
{
}
{
    (
       <number_constants> |
       <string_constant> |
       <null_constant> |
	   <boolean_constant> |
       lvalue(null) |
       <LPAREN> expression(null) <RPAREN>
	)
}

void arglist(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
	[expression(f) (<COMMA> expression(f))*]
}

void methodcall(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g);
}
{
	try {
		[ ( <THIS> | <SUPER> ) <DOT> ] <IDENT>
		( <DOT> <IDENT> )* <LPAREN> arglist(f1) <RPAREN>
	} catch(ParseException e) {
		consumeUntil(g, e, "methodcall");
	}
}

void dowhilestat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<DO> statement(g)
		<LPAREN> expression(f1) <RPAREN> <SEMICOLON>
	} catch(ParseException e) {
		consumeUntil(g, e, "dowhilestat");
	}
}

void whilestat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<WHILE> <LPAREN> expression(f1) <RPAREN>
		statement(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "whilestat");
	}
}

void switchcasestat(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f1 = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<SWITCH> <LPAREN> lvalue(f1) <RPAREN> <LBRACE>
			(casestat(g))*
			[<CASE_DEFAULT> <COLON> statlist(g)]
		<RBRACE>
	} catch(ParseException e) {
		consumeUntil(g, e, "switchstat");
	}
}

void casestat(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
		<CASE> factor() <COLON> statlist(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "switchcasestat");
	}
}
