/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; // Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

 PARSER_BEGIN(Fun)

package parser;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import recovery.*; // classes de recuperacao


public class Fun
{
final static String Version = "Fun Compiler - Version 1.0 - 2018";
int contParseError = 0; 	// contador de erros sintaticos
boolean debug_recovery;		// controla verbose de recuperacao de erros

// Define método "main" da classe Fun
	public static void main(String args[])
	{
	boolean debug_as = false;
	boolean debug_recovery = false;
	
		String filename = "";
		Fun parser;
		int i;
		boolean ms = false;

		System.out.println("Version");
		// lê os parâmetros passados para o compilador
		for (i = 0; i < args.length -1; i++)
		{
		  if(args[i].equals("-debug_AS") )
		  		debug_as = true;
		  else
		  	{
		  	  	System.out.println("Utilizacao : " +
		  	  						"java fun [-debug_AS] inputfile");
		  	  	System.exit(0);
		 	}
		}

		if (args[i].equals("-"))
		{ // lê da entrada padrão
			System.out.println("Lendo da entrada padrão ...");
			parser = new Fun(System.in); // cria AS
		}
		else
		{ // lê do arquivo
			filename = args[args.length-1];
			System.out.println("Lendo do arquivo " + filename + " ...");
			try {
				parser = new Fun(new FileInputStream(filename));
			}
		  catch (FileNotFoundException e) {
		    		System.out.println("Arquivo " + filename + " nao encontrado.");
		    		return;
		 			}
		}

		if (!debug_as) parser.disable_tracing(); // desabilita verbose do AS

		try {
		  		parser.program(); // chama o método para fazer análise
		}
		catch (ParseException e)  	
		{
		System.err.println(e.getMessage());
		//parser.contParseError = 1; // não existe recuperação de erros
		}
		finally {
		  System.out.println(parser.token_source.foundLexError() +
		  						"Lexical Errors found");
		  System.out.println(parser.contParseError +
		  						"Syntatic Errors found");
		  	}
	} //main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;	// variavel q indica se EOF foi alcancado
// metodo abaixo consome tokens ate alcancar um que pertenca
// ao conjunto de sincronizacao

void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
{
  Token tok;

  	if(debug_recovery) // informacao sobre a recuperacao
  	{
  	  	System.out.println();
  	  	System.out.println("*** " + met + " ***");
  		System.out.println("	Synchronizing Set: " + g);
 	}

 	if(g==null) throw e; // se o conjunto e null, propaga a excecao

 	tok = getToken(1); // pega token corrente
 	while(!eof)		   // se nao chegou ao fim do arquivo
 	{
		if(g.contains(tok.kind)) //achou um token do conjunto
		{
		  if(debug_recovery)
		  	System.out.println("Found syncroninzing token: " +
		  						im(tok.kind));
		 break;
		}
		if(debug_recovery)
			System.out.println("Ignoring token: " + im(tok.kind));
		getNextToken();
		tok = getToken(1);
		if(tok.kind == EOF && !g.contains(EOF) ) // fim da entrada
			eof = true;
	}
	if(tok != lastError)
	{ 
		System.out.println(e.getMessage());
		lastError = tok;
		contParseError++;	// incrementa número de erros
	}
	if(eof) throw new ParseEOFException("EOF found prematurely.");
}

} //Fun
PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
	int countLexError = 0;

	public int foundLexError()
	{
   		return countLexError;
	}
}

/* Espa�o a serem desprezados */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}

/* Palavras Reservadas da Linguagem */
TOKEN :
{
  < BREAK: "break" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < SUPER: "super" >

}


/* Tipos de variáveis */
TOKEN:
{
  < PRIMITIVE_TYPE: (<INT> | <CHAR> | <BOOLEAN> | <FLOAT> | <STRING>) >
| < #INT:"int" >
| < #STRING:"string" >
| < #CHAR:"char" >
| < #FLOAT:"float" >
| < #BOOLEAN:"boolean" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE: "/" >
| < REM: "%" >
}

/* Operadores Booleanos */

TOKEN:
{
  < NOT:"NOT" >
| < XOR:"XOR" >
| < AND:"AND" >
| < OR:"OR" >
}

/* Símbolos especiais */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < SINGLEQUOTATIONMARKS: "'" >
| < DOT: "." >
| < COLON: ":" >
}

/* Constantes da Linguagem */
TOKEN:
{
  	< number_constant:(
		<int_literal> |
		<float_literal>
	) >
| < #int_literal: (["0"-"9"] (["0"-"9"])*) > // apenas numeros
| < #float_literal: ( ["0"-"9"] (["0"-"9"])* "." ["0"-"9"] (["0"-"9"])* ) > //numeros float com .
| < string_constant: //"constante string como "abcd"
  		"\""( ~["\"","\n","\r"])* "\"" >

| < null_constant : "null" > // constant null
| < CHARACTER: "\""( ~["\n","\r","\f","\t"])* "\"" >
| < #EXPONENT: ["e","E"] (["+","-"])?  (["0"-"9"])+ >
| < boolean_constant:("true"|"false") >
}

/* Identificadores */
TOKEN :
{
  < IDENT: <LETTER> (<LETTER> | <DIGIT> | "_")* >
| < #LETTER:["A"-"Z","a"-"z"] >
| < #DIGIT:["0"-"9"] >
| < #UNDERSCORE:"_" >
}

/* Trata os erros léxicos */

SPECIAL_TOKEN :
{
<INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "'",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST:
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
    countLexError++;
   }
}


void program() throws ParseEOFException :
{
RecoverySet g = Frist.program;
}
{
  	< EOF >
|
	classlist(g)
	try { 
    	<EOF>
	}
	catch (ParseException e)
	{
  		consumeUntil(g, e, "program");
	}
	[ program() ]
}


void classlist(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = Frist.classlist.union(g);
}
{
   classdecl() [ classlist(g) ]
}


void classdecl(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
   <CLASS>  <IDENT> [ <EXTENDS> <IDENT> ] classbody(g)
}
catch(ParseException e)
{
	consumeUntil(g, e, "classdecl");
}
}


void classbody(RecoverySet g) throws ParseEOFException :
{
RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
			f3 = First.methoddecl.union(g).remove(IDENT),
			f4 = First.constructdecl.union(f3).remove(IDENT),
			f5 = First.vardecl.union(f4).remove(IDENT);
}
{
try { 
	<LBRACE>
		[classlist(f5)]
		(LOOKAHEAD(3) vardecl(f2) <SEMICOLON>)*
		(constructdecl(f4))*
		(methoddecl(f3))*
	<RBRACE>
}
catch (ParseException e)
{
  consumeUntil(g, e, "classbody");
}
}


void vardecl(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
  (<PRIMITIVE_TYPE> | <IDENT>)
  (<LBRACKET> <RBRACKET>)* varinit()
  (<COMMA> varinit())*
}
catch (ParseException e)
{
  consumeUntil(g, e, "vardecl");
}
}


void varinit(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(ASSIGN);
}
{
try { 
	lvalue(f1) [<ASSIGN> (alocexpression(g) | expression(g))]
}
catch (ParseException e)
{
  consumeUntil(g, e, "atribstat");
}
}


void constructdecl():
{
}
{
    <CONSTRUCTOR> methodbody()
}


void methoddecl():
{
}
{
	 (< PRIMITIVE_TYPE> | <IDENT>)
	 (<LBRACKET> <RBRACKET>)* <IDENT> methodbody()
}


void methodbody(RecoverySet g) throws ParseEOFException :
{
	RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
	try {
		<LPAREN> paramlist(f) <RPAREN> statement(g)
	} catch(ParseException e) {
		consumeUntil(g, e, "methodbody");
	}
}

void paramlist(RecoverySet g) throws ParseEOFException :
{
}
{
	try {
	   [
	    (<PRIMITIVE_TYPE> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)*
	    (<COMMA> (<PRIMITIVE_TYPE> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)* )*
	   ]
	} catch (ParseException e) {
	   consumeUntil(g, e, "paramlist");
	}
}


void statement(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(RBRACE).union(g).remove(IDENT); 
}
{
try { 
    LOOKAHEAD(<IDENT> <IDENT>)
    vardecl(f1) <SEMICOLON>
  |	LOOKAHEAD(1)
  	atribstat(f1) <SEMICOLON>
  |	printstat(f1) <SEMICOLON>
  |	readstat(f1) <SEMICOLON>
  |	returnstat(f1) <SEMICOLON>
  |	superstat(f1) <SEMICOLON>
  |	ifstat(g)
  | forstat(g)
  |	<LBRACE> statlist(f2) <RBRACE>
  |	<BREAK> <SEMICOLON>
  |	<SEMICOLON>
}
catch (ParseException e)
{
  consumeUntil(g, e, "statement");
}
}


void methodcall():
{
}
{
	 <IDENT>
  ( <DOT> <IDENT> )* <LPAREN> arglist() <RPAREN>
}

void lvalue(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
  <IDENT> (
           <LBRACKET> expression(null) <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist(null) <RPAREN>]
         )*
}
catch (ParseException e)
{
  consumeUntil(g, e, "lvalue");
}
}


void atribstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
}
{
try { 
    lvalue(f1) <ASSIGN> ( alocexpression(g) | expression(g))
}
catch (ParseException e)
{
  consumeUntil(g, e, "atribstat");
}
}


void printstat(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
    <PRINT> expression(g)
}
catch (ParseException e)
{
  consumeUntil(g, e, "printstat");
}
}


void readstat(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
    <READ> lvalue(g)
}
catch (ParseException e)
{
  consumeUntil(g, e, "readstat");
}
}


void returnstat(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
    <RETURN> [expression(g)]
}
catch (ParseException e)
{
  consumeUntil(g, e, "returnstat");
}
}


void superstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = new RecoverySet(RPAREN).union(g);
}
{
try { 
    <SUPER> <LPAREN> arglist(f) <RPAREN>
}
catch (ParseException e)
{
  consumeUntil(g, e, "superstat");
}
}


void ifstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
			f2 = new RecoverySet(ELSE).union(g);
}
{
try { 
	<IF> <LPAREN> expression(f1) <RPAREN> statement(f2)
	[LOOKAHEAD(1)<ELSE> statement(g)]
}
catch (ParseException e)
{
  consumeUntil(g, e, "ifstat");
}
}


void forstat(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
			f2 = new RecoverySet(RPAREN).union(g);
}
{
try { 
    <FOR> <LPAREN> [atribstat(f1)] <SEMICOLON>
                   [expression(f1)] <SEMICOLON>
                   [atribstat(f2)] <RPAREN>
                    statement(g)
}
catch (ParseException e)
{
  consumeUntil(g, e, "forstat");
}
}


void statlist(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = Frist.statlist.remove(IDENT).union(g);
}
{
  statement(f) [statlist(g)]
}


void alocexpression(RecoverySet g) throws ParseEOFException :
{
RecoverySet f1 = new RecoverySet(RPAREN).union(g),
			f2 = new RecoverySet(RBRACKET).union(g);
}
{
    <NEW> (
             LOOKAHEAD(2) (<IDENT> <LPAREN> arglist(f1) <RPAREN>) |
             (<PRIMITIVE_TYPE> | <IDENT>) (<LBRACKET> expression(f2) <RBRACKET>)+
          )
}


void expression(RecoverySet g) throws ParseEOFException :
{
}
{
try { 
	[<NOT>] numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ>) numexpr()]
		[(<AND>|<OR>|<XOR>) expression()]
}
catch (ParseException e)
{
  consumeUntil(g, e, "expression");
}
}


void numexpr():
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}


void term():
{
}
{
	unaryexpr() ((<MULTIPLY> | <DIVIDE> | <REM>) unaryexpr())*
}


void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor():
{
}
{
    (
       <number_constant> |
       <string_constant> |
       <null_constant> |
       <boolean_constant> |
       lvalue() |
       <LPAREN> expression() <RPAREN>
	)
}


void arglist(RecoverySet g) throws ParseEOFException :
{
RecoverySet f = new RecoverySet(COMMA).union(g);
}
{
    [expression(f) (<COMMA> expression())*]
}
