/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

 PARSER_BEGIN(Fun)

package parser;
import java.io.FileNotFoundException;
import java.io.FileInputStream;


public class Fun
{
final static String Version = "Fun Compiler - Version 1.0 - 2018";
int contParseError = 0; 	//contador de erros sintaticos

// Define método "main" da classe Fun
	public static void main(String args[])
	{
	boolean debug = false;

		String filename = "";
		Fun parser;
		int i;
		boolean ms = false;

		System.out.println("Version");
		// lê os parâmetros passados para o compilador
		for (i = 0; i < args.length -1; i++)
		{
		  if(args[i].equals("-debug_AS") )
		  		debug = true;
		  else
		  	{
		  	  	System.out.println("Utilizacao : " +
		  	  						"java fun [-debug_AS] inputfile");
		  	  	System.exit(0);
		 	}
		}

		if (args[i].equals("-"))
		{ //lê da entrada padrão
			System.out.println("Lendo da entrada padrão ...");
			parser = new Fun(System.in); // cria AS
		}
		else
		{ // lê do arquivo
			filename = args[args.length-1];
			System.out.println("Lendo do arquivo " + filename + " ...");
			try {
				parser = new Fun(new FileInputStream(filename));
			}
		  catch (FileNotFoundException e) {
		    		System.out.println("Arquivo " + filename + " nao encontrado.");
		    		return;
		 			}
		}

		if (!debug) parser.disable_tracing(); // desabilita verbose do AS

		try {
		  		parser.program(); //chama o método para fazer análise
		}
		catch (ParseException e)  	
		{
		System.err.println(e.getMessage());
		parser.contParseError = 1; // não existe recuperação de erros
		}
		finally {
		  System.out.println(parser.token_source.foundLexError() +
		  						"Lexical Errors found");
		  System.out.println(parser.contParseError +
		  						"Syntatic Errors found");
		  	}
	} //main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

}

 //Fun
PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
	int countLexError = 0;

	public int foundLexError()
	{
   		return countLexError;
	}
}

/* Espa�o a serem desprezados */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}

/* Palavras Reservadas da Linguagem */
TOKEN :
{
  < BREAK: "break" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < SUPER: "super" >

}


/* Tipos de variáveis */
TOKEN:
{
  < PRIMITIVE_TYPE: (<INT> | <CHAR> | <BOOLEAN> | <FLOAT> | <STRING>) >
| < #INT: "int" >
| < #STRING: "string" >
| < #CHAR: "char" >
| < #DOUBLE: "double" >
| < #BYTE: "byte" >
| < #SHORT: "short" >
| < #LONG: "long" >
| < #FLOAT: "float" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE: "/" >
| < REM: "%" >
| < BOOLEAN :"true"|"false" >
}

/* Operadores Booleanos */

TOKEN:
{
  < NOT:"NOT" >
| < XOR:"XOR" >
| < AND:"AND" >
| < OR:"OR" >
}

/* Símbolos especiais */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < SINGLEQUOTATIONMARKS: "'" >
| < DOT: "." >
| < COLON: ":" >
}

/* Constantes da Linguagem */
TOKEN:
{
  < int_constant:( //números decimais,octais, hexadeciamais ou binários
    			  (["0"-"9"] (["0"-"9"])*)
//    			  |
//    			  (["0"-"7"] (["0"-"7"])* (["o", "0"]) |
//    			  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
//    			  (["0"-"1"] (["0"-"1"])* ["b", "B"])
    			  )> 
| < string_constant: //"constante string como "abcd"
  		"\""( ~["\"","\n","\r"])* "\"" >

| < null_constant : "null" > // constant null
| < float_constant:	<DIGIT >(<DIGIT>)*"."<DIGIT>(<DIGIT>)* > 
| < CHARACTER: "\""( ~["\n","\r","\f","\t"])* "\"" >
| < #EXPONENT: ["e","E"] (["+","-"])?  (["0"-"9"])+ >
| < boolean_constant:("true"|"false") >
}

/* Identificadores */
TOKEN :
{
  < IDENT: <LETTER> (<LETTER> | <DIGIT> | "_")* >
| < #LETTER:["A"-"Z","a"-"z"] >
| < #DIGIT:["0"-"9"] >
| < #UNDERSCORE:"_" >
}

/* Trata os erros léxicos */

SPECIAL_TOKEN :
{
<INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "'",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST:
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
    countLexError++;
   }
}

 void program() :
{
}
{
    [ classlist() ] <EOF>

}

void classlist():
{
}
{
   classdecl() [ classlist() ]
}


void classdecl():
{
}
{
   <CLASS>  <IDENT> [ <EXTENDS> <IDENT> ] classbody()
}

void classbody():
{
}
{
	<LBRACE>
		[classlist()]
		(LOOKAHEAD(3) vardecl() <SEMICOLON>)*
		(constructdecl())*
		(methoddecl())*
	<RBRACE>
}


void vardecl():
{
}
{
  (<PRIMITIVE_TYPE> | <IDENT>)
  (<LBRACKET> <RBRACKET>)* varinit()
  (<COMMA> varinit())*
}

void varinit():
{
}
{
	lvalue() [<ASSIGN> (alocexpression() | expression())]
}

void constructdecl():
{
}
{
    <CONSTRUCTOR> methodbody()
}


void methoddecl():
{
}
{
	 (< PRIMITIVE_TYPE> | <IDENT>)
	 (<LBRACKET> <RBRACKET>)* <IDENT> methodbody()
}

void methodbody():
{
}
{
    <LPAREN> paramlist() <RPAREN> statement()
}

void paramlist():
{
}
{
   [ (<PRIMITIVE_TYPE> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)*
    (<COMMA> (<PRIMITIVE_TYPE > | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)* )*
   ]
}

void statement():
{
}
{
    LOOKAHEAD(3) vardecl() <SEMICOLON>
  |	LOOKAHEAD(4) methodcall() <SEMICOLON>
  |	LOOKAHEAD(3) atribstat() <SEMICOLON>
  |	printstat() <SEMICOLON>
  |	readstat() <SEMICOLON>
  |	returnstat() <SEMICOLON>
  |	superstat() <SEMICOLON>
  |	ifstat()
  | forstat()
  |	<LBRACE> statlist() <RBRACE>
  |	<BREAK> <SEMICOLON>
  |	<SEMICOLON>
}

void methodcall():
{
}
{
	 <IDENT>
  ( <DOT> <IDENT> )* <LPAREN> arglist() <RPAREN>
}

void lvalue() :
{
}
{
  <IDENT> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist() <RPAREN>]
         )*
}

void atribstat():
{
}
{
    lvalue() <ASSIGN> ( alocexpression() | expression())
}

void printstat():
{
}
{
    <PRINT> expression()
}

void readstat():
{
}
{
    <READ> lvalue()
}


void returnstat():
{
}
{
    <RETURN> [expression()]
}


void superstat():
{
}
{
    <SUPER> <LPAREN> arglist() <RPAREN>
}

void ifstat():
{
}
{
	<IF> <LPAREN> expression() <RPAREN> statement()
	[LOOKAHEAD(2)<ELSE> statement()]
}

void forstat():
{
}
{
    <FOR> <LPAREN> [atribstat()] <SEMICOLON>
                   [expression()] <SEMICOLON>
                   [atribstat()] <RPAREN>
                    statement()
}

void  statlist() :
{
}
{
  statement() [statlist()]
}

void alocexpression() :
{
}
{
    <NEW> (
             LOOKAHEAD(2) (<IDENT> <LPAREN> arglist() <RPAREN>) |
             (<PRIMITIVE_TYPE> | <IDENT>) (<LBRACKET> expression() <RBRACKET>)+
          )
}

void expression() :
{
}
{
	[<NOT>] numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ>) numexpr()]
		[(<AND>|<OR>|<XOR>) expression()]
}

void numexpr():
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term():
{
}
{
	unaryexpr() ((<MULTIPLY> | <DIVIDE> | <REM>) unaryexpr())*
}

void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor():
{
}
{
    (
       <int_constant> |
       <string_constant> |
       <null_constant> |
       lvalue() |
       <LPAREN> expression() <RPAREN>
	)
}

void arglist():
{
}
{
    [expression() (<COMMA> expression())*]
}
