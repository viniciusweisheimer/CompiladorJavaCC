/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

 PARSER_BEGIN(Fun)

package parser;
import java.io.*;


public class Fun
{

	final static String Version = "Fun Compiler Version 0.2.1 - 2018";
	int contParseErro= 0; //contador de erro


  public static void main(String args []) throws ParseException
  {

	boolean debug_as = false;

    Fun parser = new Fun(System.in); //analisador lexico/sintatico
	String filename = ""; // nome do arquivo a ser analisado
   	int i;

	try {
    	parser.program();
    	System.out.println("Sucesso!");
  	} catch (ParseException e) {
  		System.out.println(e);
  	} catch (TokenMgrError e) {
  	  	System.out.println(e);
  	}


	System.out.println(Version);

    // le os parametros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
    if (args[i].equals("-debug_AS") )
            debug_as = true;
    else
        {
            System.out.println("Usage is: java Fun[-debug_AS]  + inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
      // le da entrada padrao
    {
        System.out.println("Reading from standard input . . .");
        parser = new Fun(System.in);
     }

     else
     // le do arquivo
    {
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {
         parser = new Fun(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
  }


    if (! debug_as) parser.disable_tracing(); // desabilita verbose do AS
    try {
        parser.program();   // chama o metodo que faz a analise
    }
    catch (ParseException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseErro + " Syntactic Errors found");
     }
} // main


static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

}

 //Fun
PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
	int countLexError = 0;

	public int foundLexError()
	{
   		return countLexError;
	}
}

/* Espa�o a serem desprezados */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}

/* Palavras Reservadas da Linguagem */
TOKEN :
{
  < BREAK: "break" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < SUPER: "super" >

}


/* Tipos de variáveis */
TOKEN:
{
  < INT: "int" >
| < STRING: "string" >
| < CHAR: "char" >
| < DOUBLE: "double" >
| < BYTE: "byte" >
| < SHORT: "short" >
| < LONG: "long" >
| < FLOAT: "float" >
}

TOKEN :
{
  < primitivetype: "int"|"char"|"boolean"|"float"|"not"|"and"|"or"|"xor" >
}

TOKEN: // Numeros de ponto flutuante
{
< float_literal:( < intLiteral  > ) "." ( < intLiteral > ) >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
 < CHARACTER_LITERAL:
    	//( ["A"-"Z","a"-"z"])
	( ["'"]["A"-"Z","a"-"z"]["'"])
|
	( ["'"]["0"-"9"]["'"])
|
	( ["'"]["\\"]["n","r","t","f"]["'"])
>
}

TOKEN : // constantes
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

/* constantes */

TOKEN :
{
  < int_constant : (  // números decimais, octais, hexadecimais ou binários
                  (["0"-"9"] (["0"-"9"])* ["d", "D"] ) |
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])
                 ) >

	//< stringLiteral : "\"" ( <LETTER> | <DIGIT> )* "\"" > // cadeias de letras e numeros exclusivamente
|
	< intLiteral : <DIGIT> (<DIGIT>)* > // apenas números
|

  	< floatLiteral :  <intLiteral> "." ( <intLiteral> | <intLiteral> ( "e" | "E" )? ("-")? <intLiteral> )? |
		(<intLiteral>) "." ( <intLiteral> | <intLiteral> ( "e" | "E" )? ("-")? <intLiteral> ) >

|
  	< string_constant:    // constante string como "abcd bcda"
     	 "\""( ~["\"","\n","\r"])* "\"" >
|
  	< null_constant: "null" > // constante null
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < BOOLEAN :"true"|"false" >
}

/* Símbolos especiais */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < SINGLEQUOTATIONMARKS: "'" >
| < DOT: "." >
| < COLON: ":" >
}

//operadores lógicos

TOKEN:
{
  < AND: "AND" >
| < OR: "OR" >
| < XOR: "XOR" >
| < NOT: "NOT" >
}

/* Identificadores */

TOKEN :
{
  < IDENT: <LETTER> (<LETTER> | <DIGIT> | "_")* >
|
  < #LETTER:["A"-"Z","a"-"z"] >

}

/* Trata os erros léxicos */

SPECIAL_TOKEN :
{
<INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST:
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() +
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}

 void program() :
{
}
{
    [ classlist() ] <EOF>
}

void classlist():
{
}
{
   classdecl() [ classlist() ]
}


void classdecl():
{
}
{
   <CLASS>  <IDENT> [ <EXTENDS> <IDENT> ] classbody()
}

void classbody():
{
}
{
   <LBRACE>
      [classlist()]
      (constructdecl())*
      (methoddecl())*
   <RBRACE>
}


void vardecl():
{
}
{
  (<primitivetype> | <IDENT>)
  (<LBRACKET> <RBRACKET>)* varinit()
  (<COMMA> varinit())*
}

void varinit():
{
}
{
	lvalue() [<ASSIGN> (alocexpression() | expression())]
}

void constructdecl():
{
}
{
    <CONSTRUCTOR> methodbody()
}


void methoddecl():
{
}
{
	 (< primitivetype> | <IDENT>)

	(<LBRACKET> <RBRACKET>)* <IDENT> methodbody()
}

void methodbody():
{
}
{
    <LPAREN> paramlist() <RPAREN> statement()
}

void paramlist():
{
}
{

    [ (<primitivetype> | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)*
    (<COMMA> (<primitivetype > | <IDENT>) <IDENT> (<LBRACKET> <RBRACKET>)* )*
   ]
}

void statement():
{
}
{
    LOOKAHEAD(3)
    vardecl() <SEMICOLON>
  |	LOOKAHEAD(4)
    methodcall() <SEMICOLON>
  |	LOOKAHEAD(3)
    atribstat() <SEMICOLON>
  |	printstat() <SEMICOLON>
  |	readstat() <SEMICOLON>
  |	returnstat() <SEMICOLON>
  |	superstat() <SEMICOLON>
  |	ifstat()
  |	<LBRACE> statlist() <RBRACE>
  |	<BREAK> <SEMICOLON>
  |	<SEMICOLON>
}

void atribstat():
{
}
{
    lvalue() <ASSIGN> ( alocexpression() | expression())
}

void printstat():
{
}
{
    <PRINT> expression()
}

void readstat():
{
}
{
    <READ> lvalue()
}


void returnstat():
{
}
{
    <RETURN> [expression()]
}


void superstat():
{
}
{
    <SUPER> <LPAREN> arglist() <RPAREN>
}

void ifstat():
{
}
{
    <IF> <LPAREN> expression() <RPAREN> statement()
    [<ELSE> statement()]
}



void forstat():
{
}
{
    <FOR> <LPAREN> [atribstat()] <SEMICOLON>
                   [expression()] <SEMICOLON>
                   [atribstat()] <RPAREN>
                    statement()
}

void  statlist() :
{
}
{
   statement() [statlist()]
}

void lvalue() :
{
}
{
  <IDENT> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist() <RPAREN>]
         )*
}

void alocexpression() :
{
}
{
    <NEW> (
             LOOKAHEAD(2) (<IDENT> <LPAREN> arglist() <RPAREN>) |
             (<primitivetype> | <IDENT>) (<LBRACKET> numexpr() <RBRACKET>)+
          )
}

void expression() :
{
}
{
    [<NOT>] numexpr() [( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ>) numexpr()]
	[(<AND>|<OR>|<XOR>) expression()]
}

void numexpr():
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term():
{
}
{
    unaryexpr() ((<STAR> | <SLASH>| <REM>) unaryexpr())*
}

void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>)] factor()
}


void factor():
{
}
{
    (
       <int_constant> |
       <string_constant> |
       <null_constant> |
       lvalue() |
       <LPAREN> expression() <RPAREN>
	)
}

void arglist():
{
}
{
    [expression() (<COMMA> expression())*]
}

void methodcall():
{
}
{
	 <IDENT>
  ( <DOT> <IDENT> )* <LPAREN> arglist() <RPAREN>
}